# Generated by Django 4.2.7 on 2025-07-23 21:30

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, help_text='Peso en kg', null=True)),
                ('height', models.FloatField(blank=True, help_text='Altura en cm', null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino'), ('O', 'Otro')], max_length=1, null=True)),
                ('goal', models.CharField(blank=True, choices=[('lose_weight', 'Perder peso'), ('maintain_weight', 'Mantener peso'), ('gain_weight', 'Ganar peso'), ('build_muscle', 'Ganar músculo'), ('improve_health', 'Mejorar salud')], max_length=20, null=True)),
                ('activity_level', models.CharField(choices=[('sedentary', 'Sedentario'), ('light', 'Actividad ligera'), ('moderate', 'Actividad moderada'), ('active', 'Muy activo'), ('extra_active', 'Extremadamente activo')], default='moderate', max_length=15)),
                ('daily_calories', models.IntegerField(blank=True, null=True)),
                ('daily_protein', models.FloatField(blank=True, null=True)),
                ('daily_carbs', models.FloatField(blank=True, null=True)),
                ('daily_fat', models.FloatField(blank=True, null=True)),
                ('profile_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_vegetarian', models.BooleanField(default=False)),
                ('is_vegan', models.BooleanField(default=False)),
                ('is_gluten_free', models.BooleanField(default=False)),
                ('is_dairy_free', models.BooleanField(default=False)),
                ('is_keto', models.BooleanField(default=False)),
                ('preferred_meal_count', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('max_prep_time', models.IntegerField(default=30, help_text='Tiempo máximo de preparación en minutos')),
                ('budget_preference', models.CharField(choices=[('low', 'Económico'), ('medium', 'Moderado'), ('high', 'Sin restricción')], default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAllergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allergen', models.CharField(max_length=100)),
                ('severity', models.CharField(choices=[('mild', 'Leve'), ('moderate', 'Moderada'), ('severe', 'Severa')], default='moderate', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allergies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'allergen')},
            },
        ),
    ]
