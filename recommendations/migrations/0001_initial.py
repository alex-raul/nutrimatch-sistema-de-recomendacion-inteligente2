# Generated by Django 4.2.7 on 2025-07-23 21:30

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('nutrition', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyNutritionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('consumed_calories', models.FloatField(default=0)),
                ('consumed_protein', models.FloatField(default=0)),
                ('consumed_carbs', models.FloatField(default=0)),
                ('consumed_fat', models.FloatField(default=0)),
                ('consumed_fiber', models.FloatField(default=0)),
                ('consumed_sodium', models.FloatField(default=0)),
                ('water_glasses', models.IntegerField(default=0, help_text='Vasos de agua consumidos')),
                ('adherence_score', models.FloatField(blank=True, help_text='Score de adherencia 0-100', null=True)),
                ('balance_score', models.FloatField(blank=True, help_text='Score de balance nutricional 0-100', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodConsumption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(help_text='Cantidad en gramos', validators=[django.core.validators.MinValueValidator(0)])),
                ('meal_type', models.CharField(choices=[('breakfast', 'Desayuno'), ('lunch', 'Almuerzo'), ('dinner', 'Cena'), ('snack', 'Snack')], max_length=20)),
                ('calories_consumed', models.FloatField()),
                ('protein_consumed', models.FloatField()),
                ('carbs_consumed', models.FloatField()),
                ('fat_consumed', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='NutritionalProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_calories', models.IntegerField()),
                ('target_protein', models.FloatField()),
                ('target_carbs', models.FloatField()),
                ('target_fat', models.FloatField()),
                ('target_fiber', models.FloatField(default=25)),
                ('max_sodium', models.FloatField(default=2300)),
                ('min_calcium', models.FloatField(default=1000)),
                ('min_iron', models.FloatField(default=8)),
                ('min_vitamin_c', models.FloatField(default=90)),
                ('protein_importance', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('health_importance', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('taste_importance', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.FloatField(help_text='Score total de 0-100')),
                ('nutrition_score', models.FloatField(help_text='Score nutricional')),
                ('preference_score', models.FloatField(help_text='Score de preferencias')),
                ('variety_score', models.FloatField(help_text='Score de variedad')),
                ('suggested_quantity', models.FloatField(help_text='Cantidad sugerida en gramos')),
                ('reason', models.TextField(help_text='Por qué se recomienda este alimento')),
                ('user_feedback', models.CharField(choices=[('accepted', 'Aceptado'), ('rejected', 'Rechazado'), ('modified', 'Modificado'), ('pending', 'Pendiente')], default='pending', max_length=20)),
                ('position', models.IntegerField(help_text='Posición en la lista de recomendaciones')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_type', models.CharField(choices=[('daily_planning', 'Planificación diaria'), ('meal_suggestion', 'Sugerencia de comida'), ('nutrient_gap', 'Completar nutrientes'), ('similar_foods', 'Alimentos similares')], max_length=30)),
                ('current_nutrition', models.JSONField(default=dict, help_text='Estado nutricional actual')),
                ('user_preferences', models.JSONField(default=dict, help_text='Preferencias aplicadas')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SimilarFood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nutritional_similarity', models.FloatField(help_text='Similitud nutricional 0-1')),
                ('macro_similarity', models.FloatField(help_text='Similitud de macronutrientes 0-1')),
                ('overall_similarity', models.FloatField(help_text='Similitud general 0-1')),
                ('similarity_factors', models.JSONField(default=list, help_text='Factores que los hacen similares')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserFoodPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preference_score', models.FloatField(help_text='Score de -1 (no le gusta) a 1 (le gusta mucho)', validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)])),
                ('frequency_consumed', models.IntegerField(default=0)),
                ('last_consumed', models.DateTimeField(blank=True, null=True)),
                ('average_rating', models.FloatField(blank=True, null=True)),
                ('preferred_meal_types', models.JSONField(default=list, help_text='Tipos de comida donde prefiere este alimento')),
                ('confidence', models.FloatField(default=0.5, help_text='Confianza en la predicción')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserFoodRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(help_text='Calificación de 1 a 5 estrellas', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('notes', models.TextField(blank=True, help_text='Notas opcionales del usuario')),
                ('meal_type', models.CharField(blank=True, choices=[('breakfast', 'Desayuno'), ('lunch', 'Almuerzo'), ('dinner', 'Cena'), ('snack', 'Snack')], max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutrition.food')),
            ],
        ),
    ]
